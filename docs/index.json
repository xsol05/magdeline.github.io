[{"content":"Hello world!\nI graduated from the University of Otago last December where I studied Computer Science and Entrepreneurship, and now I\u0026rsquo;m working as a Software Engineer at a fintech / regtech scaleup.\nIt\u0026rsquo;s been 6 months and I\u0026rsquo;ve learnt so much, so I figured it was about time I started a blog to document all my learnings!\nExcept rather than a blog, I\u0026rsquo;d like to think of this as my digital garden where I #learninpublic 📝\nI plan to populate my garden with plants on:\nThe stack I\u0026rsquo;m using: JavaScript, TypeScript, React, styled-components, GraphQL Misc stuff eg how to use DevTools, the DOM, writing tests, my fav tech people Projects I build My journey as a Software Engineer Note that there is no set planting schedule, and the plants may be re-tended to.\nI hope you enjoy visiting my garden 🌷\nAnd I look forward to being invited to yours one day 😛\nNotes\nAbout digital gardens How to set up your own digital garden Maggie Appleton\u0026#39;s digital garden Tom Critchlow\u0026#39;s digital garden Joel Hook\u0026#39;s digital garden ","permalink":"https://magdelinehuang.com/posts/001-my-digital-garden/","summary":"A bit about me and my garden","title":"🌷 My Digital Garden"},{"content":" What is a postmortem A postmortem in tech is basically a process where teams dissect and reflect on an incident that usually happened in Production. They document what happened, learnings, and how to avoid it in the future. There\u0026rsquo;s no naming and shaming the perpetrator of the incident.\nPostmortems are not about figuring out who to blame for an incident that happened. They are about figuring out, through data and analysis, what happened, why it happened, and how it can be stopped from happening again. - Arni Birgisson My first incident As luck would have it, I had my first incident last week 😅\nLet me explain: I was the feature lead for a feature. The feature involved replacing some old components with new ones. One of the components replaced also had a validation check added to it. This check was run through Product, and the whole feature underwent extensive QA testing in various environments. Everything was going smoothly so when I received the green light, I shipped the feature aka I realeased it into our production code base, meaning our users would be able to access the feature.\nI posted an annoncement in the release channel then gave myself a pat on the back. Woohoo! 🥳 This feature took several sprints and I was so glad it was finally shipped.\nAbout half an hour later, my colleague alerts me of a tech support ticket created regarding my feature. Not too long after, I get pulled into another Slack thread regarding issues reported about the feature. Before I know it, an incident management process is kickstarted and my feature gets reverted from production 🤡\nA wave of emotions overcome me. Embarrassment, humiliation, sadness, disappointment, perplexion, indignation.\nI knew that it wasn\u0026rsquo;t my fault, or anyone\u0026rsquo;s fault for that matter, and no one was blaming me either. But, since I made the change and shipped the feature, I couldn\u0026rsquo;t help but feel a sense of responsibility. And you know, your first one just hits differently ok? 🥲\nSo first things first. I\u0026rsquo;m human and it\u0026rsquo;s natural to feel all these emotions, so I allowed myself to acknowledge them instead of just brushing them away.\nThen I reflected on the whole process and wrote some notes in preparation for our postmortem meeting. I documented what happened, why it happened, the incident timeline, mitigations, and various discussion points.\nThe meeting went smoothly and we had some great discussions, even discovering another unrelated issue through this incident.\nAll was well.\nWhat I learnt This incident sparked a bunch of thoughts:\n1. What constitutes a discussion As I was working on the feature, I came across a bug in the same area that was present in production. I posted a message in the feature channel about the bug and whether a certain field was required. Product replied that it was. Because of that, I added the validation check. This validation check ended up being the cause of the incident.\nIn retrospect, that was hardly a discussion 😅\nIt was simply a question and answer on Slack.\nHad I messaged more and clarified if it would be alright to add the validation check, perhaps we might have done a bit more thinking about the user flow of the form. And just maybe, this issue could have been picked up on.\n2. User testing is so important Everything seemed to be going fine with my feature. It passed all the code reviews, it passed all the QA testing.\nSo why did this validation check issue not get picked up on?\nIt\u0026rsquo;s because we did not test it with the end users themselves.\nSure, we as engineers and testers can write and test our feature, but how we use it might be very different to how our end users use it.\nHere\u0026rsquo;s a meme of how differently engineers and users think 🤣\nSide note: Usually before we release a feature, we will have a Bug Bash, an event where various people, both from the Product and Engineering Team and the wider business, will test out the feature. It\u0026rsquo;s where these sorts of issues get picked up on. But because of the small scale and low risk of this feature, we didn\u0026rsquo;t have one 🥲\n3. Writing tests for your code is key Tests are a great way to spot an issue before it occurring.\nYou bet that after we fixed the issue, we wrote tests for various scenarios to prevent this issue from happening again 🤡\n4. After releasing a feature, monitor the bugs channel It goes without saying, but one should always monitor the bugs channel after a feature is released.\nI never did this in the past because of how low risk my releases were, but this incident taught me a lesson.\nAlways monitor the bugs channel after a release so that you can be on standby to put out any fires! 🔥\n5. How to manage incidents in the future Since this was my first time getting involved in an incident, I was pretty clueless about the incident management process, so shout out to my colleagues for carrying me through. To put it bluntly, I felt like I was a bystander observing the firefighters put out a fire I had caused lmao 🤣\nOn the bright side, this was a fantastic opportunity for me to get acquainted with the process!\nAfterthoughts Thankfully, this incident was fairly small, low risk, and was resolved relatively quickly. There was no impact on the customers either.\nEveryone congratulated me for my first incident / postmortem because it\u0026rsquo;s something we all experience at some point and graduate from 😅\nMy manager also told me that experiencing your first incident is a sign that you\u0026rsquo;re growing fast and should be celebrated.\nMy VP of Engineering even said he\u0026rsquo;s over the moon about us having more incidents as there is no cheaper time than right now in a fast-growing business to have incidents and practise handling them so we can build robust and resilient processes.\nI really appreciate the blameless culture we have here as it makes making and learning from mistakes a lot easier.\n","permalink":"https://magdelinehuang.com/posts/004-my-first-post-mortem/","summary":"I \u0026lsquo;broke\u0026rsquo; production 😅 Here\u0026rsquo;s what happened and what I learnt","title":"💀 My First Postmortem"},{"content":"Are you doing lots of non-promotable work?\nAre you getting closer to your career goals?\nHere\u0026rsquo;s my takeaways from this insightful write up by @whereistanya on being glue and other tech career tips https://noidea.dog/glue PS Read this if you\u0026rsquo;re underrepresented in tech 👩🏻‍💻\nPPS I originally did a Twitter thread on this. Check it out here ✨\n1. Ask yourself what you want to get better at It\u0026rsquo;s not about what skills you have but what skills you want because most of our learning happens on the job.\nDon\u0026rsquo;t deprive yourself of an opportunity before even trying.\n2. You get better at what you spend time on Keep doing glue work and you\u0026rsquo;ll get better at glue.\nKeep coding and you\u0026rsquo;ll get better at coding.\nNo matter what you end up doing though, you are unlikely to regret feeling more confident in core technical skills.\n3. Learning can and should happen at work If the skills you wish you had are part of the job you\u0026rsquo;re doing all day, that\u0026rsquo;s pretty much learning on the job.\nWe need to talk more about learning in public because so much of the tech industry is built on this very skill.\n4. Leaving a technical role early could potentially limit you It sucks, but as soon as \u0026ldquo;Engineer\u0026rdquo; is removed from your title, people assume you\u0026rsquo;re not technical.\nIt\u0026rsquo;s a common implicit bias.\nIt could potentially make it difficult to come back to a technical role in the future.\n5. Questions to ask yourself when job-seeking: What would you love to get better at? What is a job that you\u0026rsquo;ll feel happy and proud to do? What doors are you comfortable making hard to reopen? Where will you feel safe? 6. Women volunteer more. Women are volunteered more. \u0026ldquo;When there is non-promotable work to be done, women volunteer to do it 48% more often than men.\u0026rdquo; Harvard Business Review It\u0026rsquo;s not that men don\u0026rsquo;t volunteer. It\u0026rsquo;s just that they know a woman will volunteer if they wait.\n7. Non-promotable tasks should be shared equally When there\u0026rsquo;s work that doesn\u0026rsquo;t really fit anyone\u0026rsquo;s job descriptions, it needs to be shared equally between teams. It needs to be tracked too.\nIt shouldn\u0026rsquo;t just get picked up by whoever is free.\n8. Titles do matter, esp for underrepresented folks Stereotypes in tech mean that if you don\u0026rsquo;t fit a certain persona, people assume you can\u0026rsquo;t code / don\u0026rsquo;t belong.\nJob titles help underrepresented folk save time and energy they don\u0026rsquo;t need to validate their credibility.\n9. If you\u0026rsquo;re underrepresented, getting promoted is diversity work. You can\u0026rsquo;t be what you can\u0026rsquo;t see, so you getting promoted can be a huge inspiration to others in your shoe.\nYou\u0026rsquo;ll also be in a better position for sponsorship and mentorship.\nTL;DR Ask yourself what you want to get better at You get better at what you spend time on Learning can and should happen at work Leaving a technical role early could potentially limit you Ask yourself these 4 questions when job-seeking (see post) Women volunteer more. Women are volunteered more. Non-promotable tasks should be shared equally Titles do matter, esp for underrepresented folks If you\u0026rsquo;re underrepresented, getting promoted is diversity work. ","permalink":"https://magdelinehuang.com/posts/003-being-glue/","summary":"My takeaways from a really famous career talk by Tanya Reilly. PS read this if you\u0026rsquo;re underrepresented in tech","title":"🔎 Being Glue"},{"content":"Variables Variables point to values and associate them with a name.\nThere are three keywords to define variables:\nvar It is used in pre-ES6 versions of JS and is no longer used currently It is global scoped or function scoped let It is the preferred way to declare a variable when it can be reassigned It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in You can declare a let variable without assigning it to a value let hobby; console.log(hobby); // undefined hobby = \u0026#34;reading\u0026#34;; console.log(hobby); // reading hobby = \u0026#34;sleeping\u0026#34;; console.log(hobby); // sleeping const It is the preferred way to declare a variable with a constant value It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in You cannot declare a const variable without assigning it to a value const happy; // Throws SyntaxErrror as it is not initialised const happy = true; console.log(happy); // true happy = false; // Throws TypeError as it cannot be reassigned const happy = false; // Throws SyntaxError as it cannot be redeclared While const variables cannot be reassigned or redeclared, it does not mean that the value which the const variable points to is immutable (cannot be changed). In this example, we have a const variable called emotion which points to an object. Objects are non-primitive and mutable.\nconst emotion = { happy: true, }; emotion.happy = false; console.log(emotion); // { happy: false } Since a variable, regardless of its keyword, simply points to a value, this means that the behaviour of the value being changed depends on the type of value being manipulated.\nValue Types In JavaScript, there are 8 different types of values, and only Objects are mutable.\nYou can check the type of a variable by using the typeof() function:\nlet hobby = \u0026#34;reading\u0026#34;; typeof hobby; // \u0026#39;string\u0026#39; const happy = true; typeof happy; // \u0026#39;boolean\u0026#39; const emotion = { happy: true, }; typeof emotion; // \u0026#39;object\u0026#39; Primitive (immutable) values Primitive values are immutable, meaning they cannot be changed. Each value is unique and independent.\n1. Undefined There is only one value of this type \u0026ndash; undefined It is an unintentionally missing value eg if you declare a variable but don\u0026rsquo;t assign it to something, it will point to undefined It will throw an error if you try to access its properties let book; console.log(book); // undefined console.log(book.author); // Throws TypeError as it cannot read properties of undefined 2. Null There is only one value of this type \u0026ndash; null It is an intentionally missing value. This is the main difference between undefined and null. It distinguishes a coding mistake (which might result in undefined) from valid missing data (expressed as null). It will throw an error if you try to access its properties It is incorrectly described as an Object when you do console.log(typeof(null)) but this is a historical JS bug let book = null; console.log(book); // null console.log(book.author); // Throws TypeError as it cannot read properties of null console.log(typeof book); // object (notice how it is not null as it should be 🤦🏻‍♀️) 3. Boolean There are two values of this type - true and false It is used to perform logical operations let isRaining = true; let isSunny = !isRaining; // false let isRainbow = isRaining \u0026amp;\u0026amp; isSunny; // false let isHappy = isRaining || isSunny; // true 4. Number JS uses numbers with limited precision. Their decimal part offers more precision closer to 0, and less precision further away from it. Hence in floating-point maths , there are only 18 quintillion numbers unlike how there is an infinite set of numbers in real maths. typeof(NaN) is a number because NaN is a numeric value. It’s called “Not a Number” because it represents the idea of an “invalid” number. Floating point maths includes a few special numbers - Nan, Infinity, -Infinity, and -0 let scale = 0; let a = 1 / scale; // Infinity let b = 0 / scale; // NaN let c = -a; // -Infinity let d = 1 / c; // -0 5. BigInt Regular numbers can’t represent large integers with precision, so BigInts fill that gap It has arbitrary precision, meaning there is an infinite number of BigInts - one for each integer in maths It usually has n at the end It is typically used in financial calculations where precision is important let alot = 9007199254740991n; // n at the end makes it a BigInt! console.log(alot + 1n); // 9007199254740992n console.log(alot + 2n); // 9007199254740993n console.log(alot + 3n); // 9007199254740994n console.log(alot + 4n); // 9007199254740995n console.log(alot + 5n); // 9007199254740996n 6. String It can be represented with single quotes '', double quotes \u0026quot;\u0026quot;, or backticks `` It has several built-in properties let country = \u0026#34;New Zealand\u0026#34;; console.log(country.length); // 11 console.log(country.toUpperCase()); // NEW ZEALAND console.log(country[4]); // Z 7. Symbol It is a built-in object whose constructor returns a symbol primitive — also called a Symbol value or just a Symbol — that\u0026rsquo;s guaranteed to be unique It is similar to door keys whereby it lets you hide some information in an object and control which parts of the code can access it It is rarely used Non-primitive (mutable) values Non-primitive values are mutable, meaning they can be changed.\n8. Object It can be used to store keyed collections of various data It includes arrays, dates, RegExps, functions, and other non-primitive values Its properties can be accessed with . (dot notation) or [] (bracket notation) let book = { title: \u0026#34;Sweet Bean Paste\u0026#34;, author: \u0026#34;Durian Sukegawa\u0026#34;, }; console.log(book.title); // \u0026#34;Sweet Bean Paste\u0026#34; console.log(book[\u0026#34;author\u0026#34;]); // \u0026#34;Durian Sukegawa\u0026#34; book.title = \u0026#34;Pinza no Shima\u0026#34;; console.log(book.title); // \u0026#34;Pinza no Shima\u0026#34; Quiz Here\u0026rsquo;s a quiz to check for your understanding. Answers included in the comments (but don\u0026rsquo;t cheat!) All credits go to Ben Coullie for this!\n1; let q = \u0026#34;yass\u0026#34;; q = \u0026#34;nooo\u0026#34;; console.log(q); 2; const w = \u0026#34;yass\u0026#34;; w = \u0026#34;nooo\u0026#34;; console.log(w); 3; let e = \u0026#34;yass\u0026#34;; e[0] = \u0026#34;n\u0026#34;; console.log(e); 4; const r = \u0026#34;yass\u0026#34;; r[0] = \u0026#34;n\u0026#34;; console.log(r); 5; let t = { yass: true }; t.yass = false; console.log(t); 6; const t = { yass: true }; t.yass = false; console.log(t); 7; let y = [1]; y[0] = 2; console.log(y); 8; const u = [1]; u[0] = 2; console.log(u); 9; // Curveball let i = { yass: true }; Object.freeze(i); i.yass = false; console.log(i); // Answers: // 1. \u0026#39;nooo\u0026#39; (a let variable can be reassigned a value) // 2. \u0026#39;yass\u0026#39; (a const variable cannot be reassigned a value) // 3. \u0026#39;yass\u0026#39; (a string value is immutable) // 4. \u0026#39;yass\u0026#39; (a string value is immutable) // 5. { yass: false } (This let variable points to an object. An object is mutable) // 6. { yass: false } (This const variable points to an object. An object is mutable) // 7. [2] (This let variable points to an object. An object is mutable) // 8. [2] (This const variable points to an object. An object is mutable) // 9. { yass: true } (Object.freeze prevents an object from being changed) References\nDan Abramov\u0026rsquo;s JustJavaScript course (highly recommended!) https://www.geeksforgeeks.org/difference-between-var-let-and-const-keywords-in-javascript/ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol ","permalink":"https://magdelinehuang.com/posts/002-js-variables-and-value-types/","summary":"The basics aren\u0026rsquo;t very basic","title":"🍰 JavaScript Variables and Value Types"},{"content":"It\u0026rsquo;s about the journey, not the destination 🚗\nDone ✅ Create site (done 27/6/22)\n✅ Write and publish my first post (done 27/6/22)\n✅ Publish to GitHub and deploy to GitHub pages (done 27/6/22)\n✅ Buy a domain and link it to my site (done 12/7/22)\n✅ Add favicon (done 21/7/22)\n✅ Write and publish my first content post (done 21/7/22)\nTo-Do ⚪️ Integrate Disqus comments\n⚪️ Add RSS feed\n⚪️ Add Google Analytics\n⚪️ Customise the header and footer (remove the background colour for share buttons)\n⚪️ Fix responsive layout (increase margins)\n⚪️ Create an About page\n⚪️ Create a Now page ⚪️ Create a 404 page\n⚪️ Add \u0026ldquo;Last edited on\u0026rdquo;\n⚪️ Customise colour of code blocks\nFuture 🚀 Integrate https://webmention.io/ and https://web.hypothes.is/ ?\n🚀 Build a wiki 🚀 Change stack to Next.js and MDX?\n","permalink":"https://magdelinehuang.com/changelog/","summary":"It\u0026rsquo;s about the journey, not the destination 🚗\nDone ✅ Create site (done 27/6/22)\n✅ Write and publish my first post (done 27/6/22)\n✅ Publish to GitHub and deploy to GitHub pages (done 27/6/22)\n✅ Buy a domain and link it to my site (done 12/7/22)\n✅ Add favicon (done 21/7/22)\n✅ Write and publish my first content post (done 21/7/22)\nTo-Do ⚪️ Integrate Disqus comments\n⚪️ Add RSS feed","title":"Changelog"}]