[{"content":"Hello world!\nI graduated from the University of Otago last December where I studied Computer Science and Entrepreneurship, and now I\u0026rsquo;m working as a Software Engineer at a fintech / regtech scaleup.\nIt\u0026rsquo;s been 6 months and I\u0026rsquo;ve learnt so much, so I figured it was about time I started a blog to document all my learnings!\nExcept rather than a blog, I\u0026rsquo;d like to think of this as my digital garden where I #learninpublic üìù\nI plan to populate my garden with plants on:\nThe stack I\u0026rsquo;m using: JavaScript, TypeScript, React, styled-components, GraphQL Misc stuff eg how to use DevTools, the DOM, writing tests, my fav tech people Projects I build My journey as a Software Engineer Note that there is no set planting schedule, and the plants may be re-tended to.\nI hope you enjoy visiting my garden üå∑\nAnd I look forward to being invited to yours one day üòõ\nNotes\nAbout digital gardens How to set up your own digital garden Maggie Appleton\u0026#39;s digital garden Tom Critchlow\u0026#39;s digital garden Joel Hook\u0026#39;s digital garden ","permalink":"https://magdelinehuang.com/posts/001-my-digital-garden/","summary":"A bit about me and my garden","title":"üå∑ My Digital Garden"},{"content":"Variables Variables point to values and associate them with a name.\nThere are three keywords to define variables:\nvar It is used in pre-ES6 versions of JS and is no longer used currently It is global scoped or function scoped let It is the preferred way to declare a variable when it can be reassigned It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in You can declare a let variable without assigning it to a value let hobby; console.log(hobby); // undefined hobby = \u0026#34;reading\u0026#34;; console.log(hobby); // reading hobby = \u0026#34;sleeping\u0026#34;; console.log(hobby); // sleeping const It is the preferred way to declare a variable with a constant value It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in You cannot declare a const variable without assigning it to a value const happy; // Throws SyntaxErrror as it is not initialised const happy = true; console.log(happy); // true happy = false; // Throws TypeError as it cannot be reassigned const happy = false; // Throws SyntaxError as it cannot be redeclared While const variables cannot be reassigned or redeclared, it does not mean that the value which the const variable points to is immutable (cannot be changed). In this example, we have a const variable called emotion which points to an object. Objects are non-primitive and mutable.\nconst emotion = { happy: true, }; emotion.happy = false; console.log(emotion); // { happy: false } Since a variable, regardless of its keyword, simply points to a value, this means that the behaviour of the value being changed depends on the type of value being manipulated.\nValue Types In JavaScript, there are 8 different types of values, and only Objects are mutable.\nYou can check the type of a variable by using the typeof() function:\nlet hobby = \u0026#34;reading\u0026#34;; typeof hobby; // \u0026#39;string\u0026#39; const happy = true; typeof happy; // \u0026#39;boolean\u0026#39; const emotion = { happy: true, }; typeof emotion; // \u0026#39;object\u0026#39; Primitive (immutable) values Primitive values are immutable, meaning they cannot be changed. Each value is unique and independent.\n1. Undefined There is only one value of this type \u0026ndash; undefined It is an unintentionally missing value eg if you declare a variable but don\u0026rsquo;t assign it to something, it will point to undefined It will throw an error if you try to access its properties let book; console.log(book); // undefined console.log(book.author); // Throws TypeError as it cannot read properties of undefined 2. Null There is only one value of this type \u0026ndash; null It is an intentionally missing value. This is the main difference between undefined and null. It distinguishes a coding mistake (which might result in undefined) from valid missing data (expressed as null). It will throw an error if you try to access its properties It is incorrectly described as an Object when you do console.log(typeof(null)) but this is a historical JS bug let book = null; console.log(book); // null console.log(book.author); // Throws TypeError as it cannot read properties of null console.log(typeof book); // object (notice how it is not null as it should be ü§¶üèª‚Äç‚ôÄÔ∏è) 3. Boolean There are two values of this type - true and false It is used to perform logical operations let isRaining = true; let isSunny = !isRaining; // false let isRainbow = isRaining \u0026amp;\u0026amp; isSunny; // false let isHappy = isRaining || isSunny; // true 4. Number JS uses numbers with limited precision. Their decimal part offers more precision closer to¬†0, and less precision further away from it. Hence in floating-point maths , there are only 18 quintillion numbers unlike how there is an infinite set of numbers in real maths. typeof(NaN)¬†is a number because¬†NaN¬†is a numeric value.¬†It‚Äôs called ‚ÄúNot a Number‚Äù because it represents the¬†idea¬†of an ‚Äúinvalid‚Äù number. Floating point maths includes a few special numbers - Nan, Infinity, -Infinity, and -0 let scale = 0; let a = 1 / scale; // Infinity let b = 0 / scale; // NaN let c = -a; // -Infinity let d = 1 / c; // -0 5. BigInt Regular numbers can‚Äôt represent large integers with precision, so BigInts fill that gap It has arbitrary precision, meaning there is an infinite number of BigInts - one for each integer in maths It usually has n at the end It is typically used in financial calculations where precision is important let alot = 9007199254740991n; // n at the end makes it a BigInt! console.log(alot + 1n); // 9007199254740992n console.log(alot + 2n); // 9007199254740993n console.log(alot + 3n); // 9007199254740994n console.log(alot + 4n); // 9007199254740995n console.log(alot + 5n); // 9007199254740996n 6. String It can be represented with single quotes '', double quotes \u0026quot;\u0026quot;, or backticks `` It has several built-in properties let country = \u0026#34;New Zealand\u0026#34;; console.log(country.length); // 11 console.log(country.toUpperCase()); // NEW ZEALAND console.log(country[4]); // Z 7. Symbol It is a built-in object whose constructor returns a symbol primitive ‚Äî also called a Symbol value or just a Symbol ‚Äî that\u0026rsquo;s guaranteed to be unique It is similar to door keys whereby it lets you hide some information in an object and control which parts of the code can access it It is rarely used Non-primitive (mutable) values Non-primitive values are mutable, meaning they can be changed.\n8. Object It can be used to store keyed collections of various data It includes arrays, dates, RegExps, functions, and other non-primitive values Its properties can be accessed with . (dot notation) or [] (bracket notation) let book = { title: \u0026#34;Sweet Bean Paste\u0026#34;, author: \u0026#34;Durian Sukegawa\u0026#34;, }; console.log(book.title); // \u0026#34;Sweet Bean Paste\u0026#34; console.log(book[\u0026#34;author\u0026#34;]); // \u0026#34;Durian Sukegawa\u0026#34; book.title = \u0026#34;Pinza no Shima\u0026#34;; console.log(book.title); // \u0026#34;Pinza no Shima\u0026#34; Quiz Here\u0026rsquo;s a quiz to check for your understanding. Answers included in the comments (but don\u0026rsquo;t cheat!) All credits go to Ben Coullie for this!\n1; let q = \u0026#34;yass\u0026#34;; q = \u0026#34;nooo\u0026#34;; console.log(q); 2; const w = \u0026#34;yass\u0026#34;; w = \u0026#34;nooo\u0026#34;; console.log(w); 3; let e = \u0026#34;yass\u0026#34;; e[0] = \u0026#34;n\u0026#34;; console.log(e); 4; const r = \u0026#34;yass\u0026#34;; r[0] = \u0026#34;n\u0026#34;; console.log(r); 5; let t = { yass: true }; t.yass = false; console.log(t); 6; const t = { yass: true }; t.yass = false; console.log(t); 7; let y = [1]; y[0] = 2; console.log(y); 8; const u = [1]; u[0] = 2; console.log(u); 9; // Curveball let i = { yass: true }; Object.freeze(i); i.yass = false; console.log(i); // Answers: // 1. \u0026#39;nooo\u0026#39; (a let variable can be reassigned a value) // 2. \u0026#39;yass\u0026#39; (a const variable cannot be reassigned a value) // 3. \u0026#39;yass\u0026#39; (a string value is immutable) // 4. \u0026#39;yass\u0026#39; (a string value is immutable) // 5. { yass: false } (This let variable points to an object. An object is mutable) // 6. { yass: false } (This const variable points to an object. An object is mutable) // 7. [2] (This let variable points to an object. An object is mutable) // 8. [2] (This const variable points to an object. An object is mutable) // 9. { yass: true } (Object.freeze prevents an object from being changed) References\nDan Abramov\u0026rsquo;s JustJavaScript course (highly recommended!) https://www.geeksforgeeks.org/difference-between-var-let-and-const-keywords-in-javascript/ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol ","permalink":"https://magdelinehuang.com/posts/002-js-variables-and-value-types/","summary":"The basics aren\u0026rsquo;t very basic","title":"üç∞ JavaScript Variables and Value Types"},{"content":"It\u0026rsquo;s about the journey, not the destination üöó\nDone ‚úÖ Create site (done 27/6/22)\n‚úÖ Write and publish my first post (done 27/6/22)\n‚úÖ Publish to GitHub and deploy to GitHub pages (done 27/6/22)\n‚úÖ Buy a domain and link it to my site (done 12/7/22)\n‚úÖ Add favicon (done 21/7/22)\n‚úÖ Write and publish my first content post (done 21/7/22)\nTo-Do ‚ö™Ô∏è Integrate Disqus comments\n‚ö™Ô∏è Add RSS feed\n‚ö™Ô∏è Add Google Analytics\n‚ö™Ô∏è Customise the header and footer (remove the background colour for share buttons)\n‚ö™Ô∏è Fix responsive layout (increase margins)\n‚ö™Ô∏è Create an About page\n‚ö™Ô∏è Create a Now page ‚ö™Ô∏è Create a 404 page\n‚ö™Ô∏è Add \u0026ldquo;Last edited on\u0026rdquo;\n‚ö™Ô∏è Customise colour of code blocks\nFuture üöÄ Integrate https://webmention.io/ and https://web.hypothes.is/ ?\nüöÄ Build a wiki üöÄ Change stack to Next.js and MDX?\n","permalink":"https://magdelinehuang.com/changelog/","summary":"It\u0026rsquo;s about the journey, not the destination üöó\nDone ‚úÖ Create site (done 27/6/22)\n‚úÖ Write and publish my first post (done 27/6/22)\n‚úÖ Publish to GitHub and deploy to GitHub pages (done 27/6/22)\n‚úÖ Buy a domain and link it to my site (done 12/7/22)\n‚úÖ Add favicon (done 21/7/22)\n‚úÖ Write and publish my first content post (done 21/7/22)\nTo-Do ‚ö™Ô∏è Integrate Disqus comments\n‚ö™Ô∏è Add RSS feed","title":"Changelog"}]