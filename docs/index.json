[{"content":"Hello world!\nI graduated from the University of Otago last December where I studied Computer Science and Entrepreneurship, and now I\u0026rsquo;m working as a Software Engineer at a fintech / regtech scaleup.\nIt\u0026rsquo;s been 6 months and I\u0026rsquo;ve learnt so much, so I figured it was about time I started a blog to document all my learnings!\nExcept rather than a blog, I\u0026rsquo;d like to think of this as my digital garden where I #learninpublic üìù\nI plan to populate my garden with plants on:\nThe stack I\u0026rsquo;m using: JavaScript, TypeScript, React, styled-components, GraphQL Misc stuff eg how to use DevTools, the DOM, writing tests, my fav tech people Projects I build My journey as a Software Engineer Note that there is no set planting schedule, and the plants may be re-tended to.\nI hope you enjoy visiting my garden ü™¥\nAnd I look forward to being invited to yours one day üòõ\nNotes\nAbout digital gardens How to set up your own digital garden Maggie Appleton\u0026#39;s digital garden Tom Critchlow\u0026#39;s digital garden Joel Hook\u0026#39;s digital garden ","permalink":"https://xsol05.github.io/posts/001-my-digital-garden/","summary":"A bit about me and my garden","title":"ü™¥ My Digital Garden"},{"content":"Variables Variables point to values and associate them with a name.\nThere are three keywords to define variables:\nvar Used in pre-ES6 versions of JS and is no longer used currently It is global scoped or function scoped. let Preferred way to declare a variable when it can be reassigned It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in let hobby = \u0026#34;reading\u0026#34;; console.log(hobby); // reading hobby = \u0026#34;sleeping\u0026#34;; console.log(hobby); // sleeping const Preferred way to declare a variable with a constant value It is block scoped meaning it can\u0026rsquo;t be accessed outside the block it was defined in const happy = true; console.log(happy); // true happy = false; // Throws TypeError as it cannot be reassigned const happy = false; // Throws SyntaxError as it cannot be redeclared While const variables cannot be reassigned or redeclared, it does not mean that the value which const points to is immutable.\nconst poop = { scoop: true, }; poop.scoop = false; console.log(poop); // { scoop: false } Since a variable, regardless of its keyword, simply points to a value, this means that the behaviour of the value being changed depends on the type of value being manipulated.\nValue Types In JavaScript, there are 8 different types of values, and only Objects are mutable.\nPrimitive (immutable) values Primitive values are immutable, meaning they cannot be changed. Each value is unique and independent.\n1. String Can be represented with '', \u0026quot;\u0026quot;, or `` 2. Boolean Only true or false Be careful with the operator signs 3. Number JS uses numbers with limited precision. Their decimal part offers more precision closer to¬†0, and less precision further away from it. Floating point maths includes a few special numbers - Nan, Infinity, -Infinity, and -0. typeof(NaN)¬†is a number because¬†NaN¬†is a numeric value.¬†It‚Äôs called ‚ÄúNot a Number‚Äù because it represents the¬†idea¬†of an ‚Äúinvalid‚Äù number. let scale = 0; let a = 1 / scale; // Infinity let b = 0 / scale; // NaN let c = -a; // -Infinity let d = 1 / c; // -0 4. BigInt Regular numbers can‚Äôt represent large integers with precision, so BigInts fill that gap They usually have n at the end They have arbitrary precision, meaning there is an infinite number of BigInts - one for each integer in Maths 5. Symbol 6. Null An intentionally missing value It is incorrectly described as an object when you do console.log(typeof(null)) but this is a historical JS bug 7. Undefined An unintentionally missing value Non-primitive (mutable) values Non-primitive values are mutable, meaning they can be changed.\n8. Object Quiz Here\u0026rsquo;s a quiz to check for your understanding. Answers included in comments (but don\u0026rsquo;t cheat!) All credits go to Ben Coullie for this!\n1; let q = \u0026#34;yass\u0026#34;; q = \u0026#34;nooo\u0026#34;; console.log(q); 2; const w = \u0026#34;yass\u0026#34;; w = \u0026#34;nooo\u0026#34;; console.log(w); 3; let e = \u0026#34;yass\u0026#34;; e[0] = \u0026#34;n\u0026#34;; console.log(e); 4; const r = \u0026#34;yass\u0026#34;; r[0] = \u0026#34;n\u0026#34;; console.log(r); 5; let t = { yass: true }; t.yass = false; console.log(t); 6; const t = { yass: true }; t.yass = false; console.log(t); 7; let y = [1]; y[0] = 2; console.log(y); 8; const u = [1]; u[0] = 2; console.log(u); 9; // Curveball let i = { yass: true }; Object.freeze(i); i.yass = false; console.log(i); // Answers: // 1. \u0026#39;nooo\u0026#39; (a let variable can be reassigned a value) // 2. \u0026#39;yass\u0026#39; (a const variable cannot be reassigned a value) // 3. \u0026#39;yass\u0026#39; (a string value is immutable) // 4. \u0026#39;yass\u0026#39; (a string value is immutable) // 5. { yass: false } (This let variable points to an object. An object is mutable) // 6. { yass: false } (This const variable points to an object. An object is mutable) // 7. [2] (This let variable points to an object. An object is mutable) // 8. [2] (This const variable points to an object. An object is mutable) // 9. { yass: true } References\nDan Abramov\u0026rsquo;s JustJavaScript course https://www.geeksforgeeks.org/difference-between-var-let-and-const-keywords-in-javascript/ ","permalink":"https://xsol05.github.io/posts/002-js-variables-and-value-types/","summary":"The basics aren\u0026rsquo;t very basic","title":"üß∂ JavaScript Variables and Value Types"}]